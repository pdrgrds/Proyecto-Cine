//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Proyecto_CineALL.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/comestibles", ReplyAction="http://tempuri.org/IService1/comestiblesResponse")]
        System.Collections.Generic.List<Models.Comestibles> comestibles();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/comestibles", ReplyAction="http://tempuri.org/IService1/comestiblesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Models.Comestibles>> comestiblesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AgregarCome", ReplyAction="http://tempuri.org/IService1/AgregarComeResponse")]
        string AgregarCome(Models.Comestibles reg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AgregarCome", ReplyAction="http://tempuri.org/IService1/AgregarComeResponse")]
        System.Threading.Tasks.Task<string> AgregarComeAsync(Models.Comestibles reg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ActualizarCome", ReplyAction="http://tempuri.org/IService1/ActualizarComeResponse")]
        string ActualizarCome(Models.Comestibles reg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ActualizarCome", ReplyAction="http://tempuri.org/IService1/ActualizarComeResponse")]
        System.Threading.Tasks.Task<string> ActualizarComeAsync(Models.Comestibles reg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EliminarCome", ReplyAction="http://tempuri.org/IService1/EliminarComeResponse")]
        string EliminarCome(Models.Comestibles reg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EliminarCome", ReplyAction="http://tempuri.org/IService1/EliminarComeResponse")]
        System.Threading.Tasks.Task<string> EliminarComeAsync(Models.Comestibles reg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/tipocomestibles", ReplyAction="http://tempuri.org/IService1/tipocomestiblesResponse")]
        System.Collections.Generic.List<Models.TipoComestible> tipocomestibles();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/tipocomestibles", ReplyAction="http://tempuri.org/IService1/tipocomestiblesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Models.TipoComestible>> tipocomestiblesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AgregarTipCome", ReplyAction="http://tempuri.org/IService1/AgregarTipComeResponse")]
        string AgregarTipCome(Models.TipoComestible reg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AgregarTipCome", ReplyAction="http://tempuri.org/IService1/AgregarTipComeResponse")]
        System.Threading.Tasks.Task<string> AgregarTipComeAsync(Models.TipoComestible reg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ActualizarTipCome", ReplyAction="http://tempuri.org/IService1/ActualizarTipComeResponse")]
        string ActualizarTipCome(Models.TipoComestible reg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ActualizarTipCome", ReplyAction="http://tempuri.org/IService1/ActualizarTipComeResponse")]
        System.Threading.Tasks.Task<string> ActualizarTipComeAsync(Models.TipoComestible reg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EliminarTipCome", ReplyAction="http://tempuri.org/IService1/EliminarTipComeResponse")]
        string EliminarTipCome(Models.TipoComestible reg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EliminarTipCome", ReplyAction="http://tempuri.org/IService1/EliminarTipComeResponse")]
        System.Threading.Tasks.Task<string> EliminarTipComeAsync(Models.TipoComestible reg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/proveedor", ReplyAction="http://tempuri.org/IService1/proveedorResponse")]
        System.Collections.Generic.List<Models.Proveedor> proveedor();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/proveedor", ReplyAction="http://tempuri.org/IService1/proveedorResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Models.Proveedor>> proveedorAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AgregarProve", ReplyAction="http://tempuri.org/IService1/AgregarProveResponse")]
        string AgregarProve(Models.Proveedor reg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AgregarProve", ReplyAction="http://tempuri.org/IService1/AgregarProveResponse")]
        System.Threading.Tasks.Task<string> AgregarProveAsync(Models.Proveedor reg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ActualizarProve", ReplyAction="http://tempuri.org/IService1/ActualizarProveResponse")]
        string ActualizarProve(Models.Proveedor reg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ActualizarProve", ReplyAction="http://tempuri.org/IService1/ActualizarProveResponse")]
        System.Threading.Tasks.Task<string> ActualizarProveAsync(Models.Proveedor reg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EliminarProve", ReplyAction="http://tempuri.org/IService1/EliminarProveResponse")]
        string EliminarProve(Models.Proveedor reg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EliminarProve", ReplyAction="http://tempuri.org/IService1/EliminarProveResponse")]
        System.Threading.Tasks.Task<string> EliminarProveAsync(Models.Proveedor reg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/listTipoPelicula", ReplyAction="http://tempuri.org/IService1/listTipoPeliculaResponse")]
        System.Collections.Generic.List<Models.TipoPelicula> listTipoPelicula();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/listTipoPelicula", ReplyAction="http://tempuri.org/IService1/listTipoPeliculaResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Models.TipoPelicula>> listTipoPeliculaAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/addTipoPelicula", ReplyAction="http://tempuri.org/IService1/addTipoPeliculaResponse")]
        string addTipoPelicula(Models.TipoPelicula reg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/addTipoPelicula", ReplyAction="http://tempuri.org/IService1/addTipoPeliculaResponse")]
        System.Threading.Tasks.Task<string> addTipoPeliculaAsync(Models.TipoPelicula reg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/updateTipoPelicula", ReplyAction="http://tempuri.org/IService1/updateTipoPeliculaResponse")]
        string updateTipoPelicula(Models.TipoPelicula reg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/updateTipoPelicula", ReplyAction="http://tempuri.org/IService1/updateTipoPeliculaResponse")]
        System.Threading.Tasks.Task<string> updateTipoPeliculaAsync(Models.TipoPelicula reg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/deleteTipoPelicula", ReplyAction="http://tempuri.org/IService1/deleteTipoPeliculaResponse")]
        string deleteTipoPelicula(Models.TipoPelicula reg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/deleteTipoPelicula", ReplyAction="http://tempuri.org/IService1/deleteTipoPeliculaResponse")]
        System.Threading.Tasks.Task<string> deleteTipoPeliculaAsync(Models.TipoPelicula reg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/listPeliculas", ReplyAction="http://tempuri.org/IService1/listPeliculasResponse")]
        System.Collections.Generic.List<Models.Peliculas> listPeliculas();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/listPeliculas", ReplyAction="http://tempuri.org/IService1/listPeliculasResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Models.Peliculas>> listPeliculasAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/addPelicula", ReplyAction="http://tempuri.org/IService1/addPeliculaResponse")]
        string addPelicula(Models.Peliculas reg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/addPelicula", ReplyAction="http://tempuri.org/IService1/addPeliculaResponse")]
        System.Threading.Tasks.Task<string> addPeliculaAsync(Models.Peliculas reg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/updatePelicula", ReplyAction="http://tempuri.org/IService1/updatePeliculaResponse")]
        string updatePelicula(Models.Peliculas reg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/updatePelicula", ReplyAction="http://tempuri.org/IService1/updatePeliculaResponse")]
        System.Threading.Tasks.Task<string> updatePeliculaAsync(Models.Peliculas reg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/deletePelicula", ReplyAction="http://tempuri.org/IService1/deletePeliculaResponse")]
        string deletePelicula(Models.Peliculas reg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/deletePelicula", ReplyAction="http://tempuri.org/IService1/deletePeliculaResponse")]
        System.Threading.Tasks.Task<string> deletePeliculaAsync(Models.Peliculas reg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Transaccion", ReplyAction="http://tempuri.org/IService1/TransaccionResponse")]
        string Transaccion(Models.Boleta reg, System.Collections.Generic.List<Models.Carrito> carrito);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Transaccion", ReplyAction="http://tempuri.org/IService1/TransaccionResponse")]
        System.Threading.Tasks.Task<string> TransaccionAsync(Models.Boleta reg, System.Collections.Generic.List<Models.Carrito> carrito);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/validarUsuario", ReplyAction="http://tempuri.org/IService1/validarUsuarioResponse")]
        Models.Usuario validarUsuario(string usu, string contraseña);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/validarUsuario", ReplyAction="http://tempuri.org/IService1/validarUsuarioResponse")]
        System.Threading.Tasks.Task<Models.Usuario> validarUsuarioAsync(string usu, string contraseña);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/IniciarSesion", ReplyAction="http://tempuri.org/IService1/IniciarSesionResponse")]
        void IniciarSesion(Models.Usuario reg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/IniciarSesion", ReplyAction="http://tempuri.org/IService1/IniciarSesionResponse")]
        System.Threading.Tasks.Task IniciarSesionAsync(Models.Usuario reg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CerrarSesion", ReplyAction="http://tempuri.org/IService1/CerrarSesionResponse")]
        void CerrarSesion();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CerrarSesion", ReplyAction="http://tempuri.org/IService1/CerrarSesionResponse")]
        System.Threading.Tasks.Task CerrarSesionAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : Proyecto_CineALL.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<Proyecto_CineALL.ServiceReference1.IService1>, Proyecto_CineALL.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Collections.Generic.List<Models.Comestibles> comestibles() {
            return base.Channel.comestibles();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Models.Comestibles>> comestiblesAsync() {
            return base.Channel.comestiblesAsync();
        }
        
        public string AgregarCome(Models.Comestibles reg) {
            return base.Channel.AgregarCome(reg);
        }
        
        public System.Threading.Tasks.Task<string> AgregarComeAsync(Models.Comestibles reg) {
            return base.Channel.AgregarComeAsync(reg);
        }
        
        public string ActualizarCome(Models.Comestibles reg) {
            return base.Channel.ActualizarCome(reg);
        }
        
        public System.Threading.Tasks.Task<string> ActualizarComeAsync(Models.Comestibles reg) {
            return base.Channel.ActualizarComeAsync(reg);
        }
        
        public string EliminarCome(Models.Comestibles reg) {
            return base.Channel.EliminarCome(reg);
        }
        
        public System.Threading.Tasks.Task<string> EliminarComeAsync(Models.Comestibles reg) {
            return base.Channel.EliminarComeAsync(reg);
        }
        
        public System.Collections.Generic.List<Models.TipoComestible> tipocomestibles() {
            return base.Channel.tipocomestibles();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Models.TipoComestible>> tipocomestiblesAsync() {
            return base.Channel.tipocomestiblesAsync();
        }
        
        public string AgregarTipCome(Models.TipoComestible reg) {
            return base.Channel.AgregarTipCome(reg);
        }
        
        public System.Threading.Tasks.Task<string> AgregarTipComeAsync(Models.TipoComestible reg) {
            return base.Channel.AgregarTipComeAsync(reg);
        }
        
        public string ActualizarTipCome(Models.TipoComestible reg) {
            return base.Channel.ActualizarTipCome(reg);
        }
        
        public System.Threading.Tasks.Task<string> ActualizarTipComeAsync(Models.TipoComestible reg) {
            return base.Channel.ActualizarTipComeAsync(reg);
        }
        
        public string EliminarTipCome(Models.TipoComestible reg) {
            return base.Channel.EliminarTipCome(reg);
        }
        
        public System.Threading.Tasks.Task<string> EliminarTipComeAsync(Models.TipoComestible reg) {
            return base.Channel.EliminarTipComeAsync(reg);
        }
        
        public System.Collections.Generic.List<Models.Proveedor> proveedor() {
            return base.Channel.proveedor();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Models.Proveedor>> proveedorAsync() {
            return base.Channel.proveedorAsync();
        }
        
        public string AgregarProve(Models.Proveedor reg) {
            return base.Channel.AgregarProve(reg);
        }
        
        public System.Threading.Tasks.Task<string> AgregarProveAsync(Models.Proveedor reg) {
            return base.Channel.AgregarProveAsync(reg);
        }
        
        public string ActualizarProve(Models.Proveedor reg) {
            return base.Channel.ActualizarProve(reg);
        }
        
        public System.Threading.Tasks.Task<string> ActualizarProveAsync(Models.Proveedor reg) {
            return base.Channel.ActualizarProveAsync(reg);
        }
        
        public string EliminarProve(Models.Proveedor reg) {
            return base.Channel.EliminarProve(reg);
        }
        
        public System.Threading.Tasks.Task<string> EliminarProveAsync(Models.Proveedor reg) {
            return base.Channel.EliminarProveAsync(reg);
        }
        
        public System.Collections.Generic.List<Models.TipoPelicula> listTipoPelicula() {
            return base.Channel.listTipoPelicula();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Models.TipoPelicula>> listTipoPeliculaAsync() {
            return base.Channel.listTipoPeliculaAsync();
        }
        
        public string addTipoPelicula(Models.TipoPelicula reg) {
            return base.Channel.addTipoPelicula(reg);
        }
        
        public System.Threading.Tasks.Task<string> addTipoPeliculaAsync(Models.TipoPelicula reg) {
            return base.Channel.addTipoPeliculaAsync(reg);
        }
        
        public string updateTipoPelicula(Models.TipoPelicula reg) {
            return base.Channel.updateTipoPelicula(reg);
        }
        
        public System.Threading.Tasks.Task<string> updateTipoPeliculaAsync(Models.TipoPelicula reg) {
            return base.Channel.updateTipoPeliculaAsync(reg);
        }
        
        public string deleteTipoPelicula(Models.TipoPelicula reg) {
            return base.Channel.deleteTipoPelicula(reg);
        }
        
        public System.Threading.Tasks.Task<string> deleteTipoPeliculaAsync(Models.TipoPelicula reg) {
            return base.Channel.deleteTipoPeliculaAsync(reg);
        }
        
        public System.Collections.Generic.List<Models.Peliculas> listPeliculas() {
            return base.Channel.listPeliculas();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Models.Peliculas>> listPeliculasAsync() {
            return base.Channel.listPeliculasAsync();
        }
        
        public string addPelicula(Models.Peliculas reg) {
            return base.Channel.addPelicula(reg);
        }
        
        public System.Threading.Tasks.Task<string> addPeliculaAsync(Models.Peliculas reg) {
            return base.Channel.addPeliculaAsync(reg);
        }
        
        public string updatePelicula(Models.Peliculas reg) {
            return base.Channel.updatePelicula(reg);
        }
        
        public System.Threading.Tasks.Task<string> updatePeliculaAsync(Models.Peliculas reg) {
            return base.Channel.updatePeliculaAsync(reg);
        }
        
        public string deletePelicula(Models.Peliculas reg) {
            return base.Channel.deletePelicula(reg);
        }
        
        public System.Threading.Tasks.Task<string> deletePeliculaAsync(Models.Peliculas reg) {
            return base.Channel.deletePeliculaAsync(reg);
        }
        
        public string Transaccion(Models.Boleta reg, System.Collections.Generic.List<Models.Carrito> carrito) {
            return base.Channel.Transaccion(reg, carrito);
        }
        
        public System.Threading.Tasks.Task<string> TransaccionAsync(Models.Boleta reg, System.Collections.Generic.List<Models.Carrito> carrito) {
            return base.Channel.TransaccionAsync(reg, carrito);
        }
        
        public Models.Usuario validarUsuario(string usu, string contraseña) {
            return base.Channel.validarUsuario(usu, contraseña);
        }
        
        public System.Threading.Tasks.Task<Models.Usuario> validarUsuarioAsync(string usu, string contraseña) {
            return base.Channel.validarUsuarioAsync(usu, contraseña);
        }
        
        public void IniciarSesion(Models.Usuario reg) {
            base.Channel.IniciarSesion(reg);
        }
        
        public System.Threading.Tasks.Task IniciarSesionAsync(Models.Usuario reg) {
            return base.Channel.IniciarSesionAsync(reg);
        }
        
        public void CerrarSesion() {
            base.Channel.CerrarSesion();
        }
        
        public System.Threading.Tasks.Task CerrarSesionAsync() {
            return base.Channel.CerrarSesionAsync();
        }
    }
}
